name: Lab5 ETL Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  STEP_FUNCTION_NAME: lab5-lakehouse-stepfunc

jobs:
  # Job 1: CI for Spark Jobs
  spark-ci:
    name: Spark Job CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyspark==3.4.0
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint Spark Jobs
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 spark-jobs/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 spark-jobs/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run Spark Job Tests
      run: |
        # Run unit tests for Spark jobs
        if [ -d "tests/" ]; then
          python -m pytest tests/ -v --cov=spark-jobs --cov-report=xml
        else
          echo "No tests directory found, skipping tests"
        fi
        
    - name: Validate Spark Job Syntax
      run: |
        # Check if Spark jobs can be imported without syntax errors
        for file in spark-jobs/*.py; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            python -m py_compile "$file"
          fi
        done
        
    - name: Upload coverage reports
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

# task 2: Validate Step Function Definition
  stepfunction-validate:
    name: Validate Step Function
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install AWS CLI and validation tools
      run: |
        pip install awscli boto3 jsonschema
        
    - name: Validate Step Function JSON
      run: |
        # Check if Step Function JSON is valid
        if [ -f "stepfunctions/lab5-stepfunction.json" ]; then
          echo "Validating Step Function JSON syntax..."
          python -m json.tool stepfunctions/lab5-stepfunction.json > /dev/null
          echo "Step Function JSON is valid"
        else
          echo "Step Function JSON file not found"
          exit 1
        fi
        
    - name: Validate Step Function Schema
      run: |
        # Create a basic schema validation script
        cat > validate_stepfunction.py << 'EOF'
        import json
        import sys
        
        def validate_stepfunction(file_path):
            with open(file_path, 'r') as f:
                definition = json.load(f)
            
            # Basic validation checks
            required_fields = ['Comment', 'StartAt', 'States']
            for field in required_fields:
                if field not in definition:
                    print(f"Missing required field: {field}")
                    return False
            
            # Check if StartAt state exists
            start_state = definition['StartAt']
            if start_state not in definition['States']:
                print(f"StartAt state '{start_state}' not found in States")
                return False
            
            print("Step Function definition is valid")
            return True
        
        if __name__ == "__main__":
            if validate_stepfunction("stepfunctions/lab5-stepfunction.json"):
                sys.exit(0)
            else:
                sys.exit(1)
        EOF
        
        python validate_stepfunction.py

# task 3: Deploy to AWS (only on main branch)
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [spark-ci, stepfunction-validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Upload Spark Jobs to S3
      run: |
        # Upload Spark job scripts to S3
        if [ -d "spark-jobs/" ]; then
          aws s3 sync spark-jobs/ s3://aws-glue-assets-763927202642-eu-north-1/scripts/ \
            --exclude "*.pyc" \
            --exclude "__pycache__/*" \
            --exclude "*.git*"
          echo "Spark jobs uploaded to S3"
        fi
        
    - name: Update Glue Job Scripts
      run: |

      # Set the Glue IAM role (replace with your actual role ARN)
        GLUE_ROLE="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lab3-gluerole"

        declare -A GLUE_JOB_SCRIPTS=(
          ["lab5-raw(orders)"]="raw_orders_job.py"
          ["lab5-raw(order_items)"]="raw_orderitems_job.py"
          ["lab5-raw(products)"]="raw_products_job.py"
          ["lab5-Staging-orders"]="staging_order_job.py"
          ["lab5-Staging-order_items"]="staging_orderitems_job.py"
          ["lab5-staging_products"]="staging_products_job.py"
        )
        
        failed_jobs=()
        
        for job_name in "${!GLUE_JOB_SCRIPTS[@]}"; do
          script_file="${GLUE_JOB_SCRIPTS[$job_name]}"
          script_location="s3://aws-glue-assets-763927202642-eu-north-1/scripts/${script_file}"
          
          echo "Checking if Glue job '$job_name' exists..."
          if aws glue get-job --job-name "$job_name" >/dev/null 2>&1; then
            echo "Updating Glue job '$job_name' with script: ${script_location}"
            
            if aws glue update-job \
              --job-name "$job_name" \
              --job-update "Role=$GLUE_ROLE,Command={Name=glueetl,ScriptLocation=$script_location,PythonVersion=3}"; then

              echo "✓ Successfully updated Glue job '$job_name'"
            else
              echo "✗ Failed to update Glue job '$job_name'"
              failed_jobs+=("$job_name")
            fi
          else
            echo "⚠ Glue job '$job_name' not found. Skipping."
          fi
        done
        
        if [ ${#failed_jobs[@]} -gt 0 ]; then
          echo "Failed to update jobs: ${failed_jobs[*]}"
          exit 1
        fi
        
    - name: Deploy Step Function
      run: |
        # Get current Step Function definition
        CURRENT_DEF=$(aws stepfunctions describe-state-machine \
          --state-machine-arn "arn:aws:states:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:$STEP_FUNCTION_NAME" \
          --query 'definition' --output text 2>/dev/null || echo "")
        
        # Read new definition
        NEW_DEF=$(cat stepfunctions/lab5-stepfunction.json | jq -c .)
        
        if [ -n "$CURRENT_DEF" ]; then
          echo "Updating existing Step Function..."
          aws stepfunctions update-state-machine \
            --state-machine-arn "arn:aws:states:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:$STEP_FUNCTION_NAME" \
            --definition "$NEW_DEF"
          echo "Step Function updated successfully"
        else
          echo "Creating new Step Function..."
          aws stepfunctions create-state-machine \
            --name "$STEP_FUNCTION_NAME" \
            --definition "$NEW_DEF" \
            --role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/StepFunctions-lab5-lakehouse-stepfunc-role-fudiny7i5"
          echo "Step Function created successfully"
        fi
        
    - name: Run Integration Tests
      run: |
        # Optional: Run integration tests after deployment
        echo "Running post-deployment validation..."
        
        # Check if Step Function is active
        STATUS=$(aws stepfunctions describe-state-machine \
          --state-machine-arn "arn:aws:states:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:$STEP_FUNCTION_NAME" \
          --query 'status' --output text)
        
        if [ "$STATUS" = "ACTIVE" ]; then
          echo "Step Function is active and ready"
        else
          echo "Step Function status: $STATUS"
          exit 1
        fi